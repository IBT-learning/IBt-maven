pipeline {
    agent {label 'UX_IBT'}


    stages{
        stage('Github Connection'){
            steps{
                git branch: 'april2024_godson',
                credentialsId: 'GodsonGit',
                url: 'https://github.com/IBT-learning/ibt-maven.git'
            }
        }


        stage('Sonaqube scan start point'){
            environment{
                scannerHome = tool 'ibt-sonarqube'
            }
            steps{
                withSonarQubeEnv(credentialsId: 'student-sonar-token', installationName: 'IBT sonarqube') {
                    sh '${scannerHome}/bin/sonar-scanner'
            }
        }
        }



        stage('validate maven'){
            steps{
                withMaven(
                maven: 'maven_3.8',
                traceability: true
                )
                {
                sh '''
                    mvn --version
                    mvn validate
                    '''
                }
            }
        }
        stage('compile maven'){
            steps{

                sh '''
                    mvn --version
                    mvn compile
                    '''
            }
        }
        stage('test Maven'){
            steps{

                sh '''
                    mvn test
                    '''
            }
        }
        stage('package maven'){
            steps{

                sh '''
                    mvn package
                    '''
            }
        }

        stage('Dependency check'){
            steps{
                dependencyCheck additionalArguments: '''
                    -o "./"
                    -s "./"
                    -f "ALL"
                    --prettyPrint
                    ''', odcInstallation: 'dependency-check'
                    dependencyCheckPublisher pattern: 'dependency-check-report.xml'
            }
        }

        stage('deploy maven'){
            steps{
                withMaven(
                maven: 'maven_3.9.3',
                mavenSettingsConfig: 'artifactory-settings',
                traceability: true) {
                sh 'mvn deploy'
                }

            }
        }

        stage('deploy using managed'){
            steps{
                configFileProvider([configFile(fileId: 'artifactory-settings', targetLocation: 'mvn_deploy_configSetting', variable: 'mvn_deploy_configSetting')]) {
                sh 'mvn deploy -s $mvn_deploy_configSetting'
}
            }
        }


    }
    }